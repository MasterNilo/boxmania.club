using System;
using System.Collections.Generic;
using System.IO;
using UnityEngine;

public class SongData
{
    public enum PatternType
    {
        AUTO,
        CUSTOM,
        REC
    }

    public string name;
    public string path = null;
    public int defaultIndex = -1;
    public bool isYoutube;
    public Dictionary<string, string> patternPaths = new Dictionary<string, string>();//4_AUTO, 8_SLOTA, etc
    public Dictionary<SongRow.Type, List<SongRow>> rows = new Dictionary<SongRow.Type,List<SongRow>>();
    AudioClip clip;

    public void setClip(AudioClip clip)
    {
        this.clip = clip;
    }

    public SongData(string url, string name, bool yt)//youtube song
    {
        this.name = name;
        this.path = url;
        SongData.findPatterns(patternPaths, name);
        isYoutube = true;
    }
    public SongData(string name, string path)//custom song
    {
        if (name.EndsWith(".mp3"))
            name = name.Substring(0, name.Length - ".mp3".Length);
        this.name = name;
        this.path = path;
        SongData.findPatterns(patternPaths, name);
    }
    public SongData(string name, int defaultIndex)//song from bundle
    {
        this.name = name;
        this.defaultIndex = defaultIndex;
        SongData.findPatterns(patternPaths, name);
        clip = AssetManager.instance.getDefaultSong(defaultIndex);
    }
    //public bool[] availableCustomPatternLayouts()
    //{
    //    bool[] result = new bool[3];

    //    return result;
    //}
    //public bool isDefaultSong()
    //{
    //    return defaultIndex >= 0;
    //}
    public static void findPatterns(Dictionary<string, string> patternPaths, string baseFileName)
    {
        string basePatternFileName = Path.Combine(Path.Combine(AssetManager.instance.getBaseFolder(), "patterns"), baseFileName);

        //getPatternFileName(baseFileName, 4, PatternType.AUTO);
        addPatternPath(patternPaths, basePatternFileName, getPatternSuffix(4, PatternType.AUTO));
        addPatternPath(patternPaths, basePatternFileName, getPatternSuffix(6, PatternType.AUTO));
        addPatternPath(patternPaths, basePatternFileName, getPatternSuffix(8, PatternType.AUTO));
        addPatternPath(patternPaths, basePatternFileName, getPatternSuffix(4, PatternType.CUSTOM));
        addPatternPath(patternPaths, basePatternFileName, getPatternSuffix(6, PatternType.CUSTOM));
        addPatternPath(patternPaths, basePatternFileName, getPatternSuffix(8, PatternType.CUSTOM));
        addPatternPath(patternPaths, basePatternFileName, getPatternSuffix(4, PatternType.REC));
        addPatternPath(patternPaths, basePatternFileName, getPatternSuffix(6, PatternType.REC));
        addPatternPath(patternPaths, basePatternFileName, getPatternSuffix(8, PatternType.REC));

        //Debug.Log("Finding patterns, base " + basePatternFileName + " " + patternPaths.Count);
    }
    static void addPatternPath(Dictionary<string, string> paths, string basePatternFileName, string suffix)
    {
        string checkPatternPath = basePatternFileName + suffix + ".ptn";
        if (File.Exists(checkPatternPath))
            paths.Add(suffix, checkPatternPath);

        if (File.Exists(checkPatternPath))
            Debug.Log("File exists? " + checkPatternPath + " " + File.Exists(checkPatternPath));
    }
    public static string getPatternSuffix(int lanes, PatternType type)
    {
        return "_" + lanes + "_" + type;
    }
    public static string getPatternFileName(string clipName, int lanes, PatternType type)
    {
        return clipName + getPatternSuffix(lanes, type) + ".ptn";
    }
    public static void storePattern(string patternFilePath, List<SongRow> rowsBpm, List<SongRow> rowsBeat, List<SongRow> rowsBox, List<SongRow> rowsLanePos, string[] header = null)
    {
        Debug.Log("-------------------------- STORE PATTERN " + patternFilePath + " rowCount " + (rowsBeat.Count + rowsBox.Count + rowsBpm.Count + rowsLanePos.Count));
        if (header == null)
            header = new string[] { "//generated by boxmania.club v" + Utils.gameVersion, "version=0", "description=..." };
        string[] rowsStr = new string[rowsBeat.Count + rowsBox.Count + rowsBpm.Count + rowsLanePos.Count + header.Length];

        //rowsBpm.AddRange(rowsBox);

        //TODO also save lane pos layouts (currently saving timestamped ones)

        int c = 0;
        for (int i = 0; i < header.Length; i++)
            rowsStr[c++] = header[i].ToString();
        for (int i = 0; i < rowsBpm.Count; i++)
            rowsStr[c++] = rowsBpm[i].ToString();
        for (int i = 0; i < rowsLanePos.Count; i++)
            rowsStr[c++] = rowsLanePos[i].ToString();
        for (int i = 0; i < rowsBox.Count; i++)
            rowsStr[c++] = rowsBox[i].ToString();//TODO if rowBox.length < max lanes, add the ",0s"
        for (int i = 0; i < rowsBeat.Count; i++)
            rowsStr[c++] = rowsBeat[i].ToString();


        Debug.Log("Writing recorded pattern " + patternFilePath + " " + rowsStr.Length);
        try
        {
            File.WriteAllLines(patternFilePath, rowsStr);
        }
        catch (Exception e)
        {
            Debug.Log("Failed to write " + patternFilePath + " " + e);
        }
        Debug.Log("Write " + patternFilePath + " (" + rowsStr.Length + ") success? " + File.Exists(patternFilePath));
    }

    internal float getClipLength()
    {
        //TODO youtube clip length? possibly not needed, clip length is used for audio analysis (not implemented for youtube)
        return clip.length;
    }

    internal string getClipName()
    {
        return name;
    }

    internal AudioClip getClip()
    {
        return clip;
    }
}